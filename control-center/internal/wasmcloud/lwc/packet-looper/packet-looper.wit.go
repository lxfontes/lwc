// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package packetlooper represents the imported interface "wasmcloud:lwc/packet-looper".
package packetlooper

import (
	"github.com/bytecodealliance/wasm-tools-go/cm"
)

// Process represents the imported function "process".
//
//	process: func(packet: u64, ttl: u64, chaos: u16, route: option<string>)
//
//go:nosplit
func Process(packet uint64, ttl uint64, chaos uint16, route cm.Option[string]) {
	packet0 := (uint64)(packet)
	ttl0 := (uint64)(ttl)
	chaos0 := (uint32)(chaos)
	route0, route1, route2 := lower_OptionString(route)
	wasmimport_Process((uint64)(packet0), (uint64)(ttl0), (uint32)(chaos0), (uint32)(route0), (*uint8)(route1), (uint32)(route2))
	return
}

//go:wasmimport wasmcloud:lwc/packet-looper process
//go:noescape
func wasmimport_Process(packet0 uint64, ttl0 uint64, chaos0 uint32, route0 uint32, route1 *uint8, route2 uint32)
